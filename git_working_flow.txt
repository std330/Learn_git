---------------------------------------------------------------------------------------------------------------------------------------------
git工作流的常见分支种类
main分支（主分支）
	长期存在的分支，一般不会直接进行修改，而是通过合并分支的方式来修改，每次合并分支都会产生新的版本号
	使用git tag添加版本号，一般是1.4.2（主版本，次版本，修订版本）
		主版本：主要的功能变化或重大更新
		次版本：新功能、改进和更新，通常不会影响现有功能
		修订版本：小修复、安全漏洞补丁，通常不会影响现有功能和接口
develop分支（开发分支）
	长期存在的分支，项目开发的核心分支，主要的新功能都在这里开发。
feature分支（功能分支）
	跟随版本存在的分支，由develop分支分离出来的，每个版本中不同的功能会产生不同的功能分支，当代码稳定后会合并到develop分支中去
release分支（预发布分支）
	跟随版本存在的分支，由develop分支分离出来的，每个版本的feature分支合并完后，会产生release分支用于测试，经过反复的测试后合并到main分支和develop分支中去
hotfix分支（修复分支）
	短期存在的分支，常用于修复线上问题，小bug。修复完成后一般会合并到main分支或是develop分支中去，合并后分支会被删除。


---------------------------------------------------------------------------------------------------------------------------------------------
github工作流
只有一个main'分支，团队成员自己在本地建立分支开发，当开发完成后申请合并到main分支。
	分支名的命名：
		功能分支：feature-login-page （feature-功能名称-内容）
		修复分支：hotfix-#issueID-desc （hotfix-问题ID-？）


---------------------------------------------------------------------------------------------------------------------------------------------
git工作流程
	1.git clone // 到本地
	2.git checkout -b xxx 切换至新分支xxx
	（相当于复制了remote的仓库到本地的xxx分支上
	3.修改或者添加本地代码（部署在硬盘的源文件上）
	4.git diff 查看自己对代码做出的改变
	5.git add 上传更新后的代码至暂存区
	6.git commit 可以将暂存区里更新后的代码更新到本地git
	7.git push origin xxx 将本地的xxxgit分支上传至github上的git
	----------------------------------------------------------------
	（如果在写自己的代码过程中发现远端GitHub上代码出现改变）
	1.git checkout main 切换回main分支
	2.git pull origin master(main) 将远端修改过的代码再更新到本地
	3.git checkout xxx 回到xxx分支
	4.git rebase main 我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容
	（中途可能会出现，rebase conflict -----》手动选择保留哪段代码）
	5.git push -f origin xxx 把rebase后并且更新过的代码再push到远端github上
	（-f ---》强行）
	6.原项目主人采用pull request 中的 squash and merge 合并所有不同的commit
	-----------------------------------------------------------------------------------
	远端完成更新后
	1.git branch -d xxx 删除本地的git分支
	2.git pull origin master 再把远端的最新代码拉至本地