----------------------------------------------------------------------------------------------------------------------
回车和换行
git config --global core.autocrlf true		（自动转换）git在提交的时候把回车CR换行LF 自动变成 换行LF，在检出LF时变成CRLF
git config --global core.autocrlf input		（一半自动转换）git在提交时不转换，在检出时都自动把CRLF转换成LF
git config --global core.autocrlf false		（不自动转换）git在提交和检出时都不做操作


-----------------------------------------------------------------------------------------------------------------------
仓库配置
SSH仓库需要私有密钥和公钥
在本地生成SSH密钥
cd			回到用户根目录
cd .ssh			打开.ssh文件夹
ssh-keygen -t rsa -b 4096	生成ssh密钥，-t表示协议为RSA协议，-b表示大小为4096
			然后输入密钥的文件名称（不要和之前创建的重复，重复的话会覆盖之前的，这会使之前的密钥丢失）
			之后输入密码（我们设置的这个密钥的密码）
设置好后会生成两个文件，打开.pub这个文件复制这个公钥到GitHub上
之后设置在使用github的时候使用这个文件做密钥
vi config			打开.ssh文件夹中的config文件（如果没有就创建），输入以下内容：
			# github
			Host github.com
			HostName github.com
			PreferredAuthentications publickey
			IdentityFile ~/.ssh/密钥文件名称


-----------------------------------------------------------------------------------------------------------------------
远程仓库的添加、查看和拉取
当我们的本地仓库需要上传或要从远程仓库拉取文件，我们需要以下步骤
	git remote add <远程仓库别名> <远程仓库地址>
		添加远程仓库步骤1，设置别名
	git push -u <远程仓库别名> <本地分支名>:<远程分支名>
		添加远程仓库步骤2，-u 将本地仓库和远程仓库关联起来，将本地的某分支推送给远程仓库的某分支
	git remote -v
		查看远程仓库的别名和地址的对应
	git push <远程仓库别名> <本地分支名>:<远程分支名>
		将本地仓库的某分支上传到远程仓库的某分支（若两个分支名相同可以直接写一个）
	git pull <远程仓库别名> <远程分支名>:<本地分支名>
		将远程仓库的某分支拉取到本地仓库的某分支（若两个分支名相同可以直接写一个）
当我们本地没有仓库，想从远程直接克隆下来
	git clone <远程仓库地址>


-------------------------------------------------------------------------------------------------
解决push pull不成功的问题
由于git仓库的用户信息和本地的用户信息不一致，导致上传问题
	git config --global user.name "git user name"	使用git的用户名
	git config --global user.email "git user email"	使用git的登陆邮箱
	ssh-keygen -t rsa -b 4096 -C "git仓库邮箱" 	（可选）重新生成密钥
测试ssh连接
	ssh -T git@github.com	测试github的ssh连接状态（要输入ssh的密码）
本地host文件没有配置IP地址和主机名的映射关系导致不能DNS解析
	找到host文件C:\Windows\System32\drivers\etc 以管理员身份打开
	添加IP地址和域名的映射，例如：10.0.0.8 www.XXXX.com


-----------------------------------------------------------------------------------------------------------------------
使用VSCode来编辑、管理、拉取、上传仓库
在git bash中输入 code . 命令打开VSCode
（因为之前在git bash中已经设置了关联远程仓库，所以这里用VSCode打开的时候自动读取的这些内容）
	在工作选项卡中编辑文件
	在源代码管理选项卡中将修改添加到暂存区、提交、上传（还可以检查更改的内容）
常见的VSCode快捷键：
	Ctrl+Shift+`	打开命令面板